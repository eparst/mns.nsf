'++LotusScript Development Environment:2:5:(Options):0:72
Option Public
Option Declare
Use "Permission2"

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Sub FormButtonRefr(qGoto$)
Declare Sub FormQueryclose(uidoc)
Declare Sub FormQueryopen(uidoc)
Declare Sub errhlib2013(q)
Declare Function ToArchsqre(qstr,arr) As Boolean
Declare Sub ToArchgetresp( doc As NotesDocument, col )
Declare Sub ToArchClickOLD()
Declare Sub FormPostopen(uidoc)
Declare Sub FormQuerysave(uidoc)
Declare Sub FormPostsave(uidoc)
Declare Sub FormQueryMode(uidoc)
Declare Sub ConfDoc(pardbpatch$, dbtask, DocUID$, mustremove As Boolean, fname$, removeOnClose As Boolean)
Declare Sub Confmake(uidoc, removeOnClose As Boolean)
Declare Sub DefaultExecutor2013(qdoc)
Declare Function  FromMain2013(db, FieldName$)
Declare Sub MakeAccess()
Declare Sub ToArchClick()
Declare Sub RespToArh( col As NotesDocumentCollection, doc As NotesDocument, dbArh As NotesDatabase,i As Long, archdoc,archtask As NotesDocument)
Declare Sub WizaCheckLS()

'++LotusScript Development Environment:2:5:(Declarations):0:10
Dim qFormButtonRefr As Boolean


'++LotusScript Development Environment:2:2:Initialize:0:2

'++LotusScript Development Environment:2:2:FormButtonRefr:1:8
Sub FormButtonRefr(qGoto$)
	On Error GoTo ErrHnd
	qFormButtonRefr = True
	Dim ss As New NotesSession, confUnidCol As NotesDocumentCollection, ws As New NotesUIWorkspace, tmp As NotesDocument
	Dim dbtask As NotesDatabase, DocUID$, confUnid As NotesDocument, dbviz As NotesDatabase, uidoc As NotesUIDocument, it As NotesItem, pardbpatch$
	Dim view As NotesView, doc As NotesDocument, TASKPUTH$ ', qFlag As Boolean
	Set uidoc = ws.Currentdocument
	If uidoc.Document Is Nothing Then Exit Sub
'	If curdoc.IsNewNote Then
	If uidoc.Isnewdoc Then Exit Sub
	DocUID$ = uidoc.Document.UniversalID
	Call uidoc.Close(True)
	Set doc = ss.Currentdatabase.Getdocumentbyunid(DocUID$)
	Call ws.Editdocument(uidoc.Editmode, doc)
	Set uidoc = ws.Currentdocument
	If	InStr(LCase(ss.CurrentDatabase.FileName),"indocum") > 0 or InStr(LCase(ss.CurrentDatabase.FileName),"complaint") > 0 Or InStr(LCase(ss.CurrentDatabase.FileName),"outdocum") > 0 Or _
	InStr(LCase(ss.CurrentDatabase.FileName),"protokol.nsf") > 0 Or InStr(LCase(ss.CurrentDatabase.FileName),"memos.nsf") > 0 Or _
	InStr(LCase(ss.CurrentDatabase.FileName),"ord.nsf") > 0 And  InStr(LCase(ss.CurrentDatabase.FileName),"visord.nsf") = 0 Then 
'@@@@@@@@@@@@@@
		TASKPUTH$ = FromMain2013(ss.CurrentDatabase, "TASKPUTH") ' прописан через setenyfield и в форме бд настроек данного поля нет
		If TASKPUTH$ = "" Then
			Set dbtask = ss.GetDatabase(ss.CurrentDatabase.Server , StrLeftBack(ss.CurrentDatabase.FilePath,"\")+"\TASK.NSF")
		Else
			Set dbtask = ss.GetDatabase(ss.CurrentDatabase.Server , TASKPUTH$)
		End If
		Call ConfDoc("", dbtask, DocUID$, True, "ViewTaskUnid", false) ' 3 - True если есть права удалять в этих базах
		If LCase(ss.CurrentDatabase.FileName) = "ord.nsf" Then
			If uidoc.Document.HasItem("ProjectUnid") Then
				If uidoc.Document.ProjectUnid(0) <> "" Then DocUID$ = uidoc.Document.ProjectUnid(0)
			End If
		End If
'@@@@@@@@@@@@@@		
	Call ws.Viewrefreshbydbid(dbtask.replicaid, "(LogII)")
	End If ' InStr(LCase
	If Not (InStr(LCase(ss.CurrentDatabase.FileName),"indocum") > 0 or InStr(LCase(ss.CurrentDatabase.FileName),"complaint") > 0 Or InStr(LCase(ss.CurrentDatabase.FileName),"outdocum") > 0 Or _
	InStr(LCase(ss.CurrentDatabase.FileName),"protokol.nsf") > 0 ) Then 		
		pardbpatch$ = ""
		If InStr(ss.CurrentDatabase.FilePath,"\DOCUM.NSF") > 0 Then
			Set dbtask = ss.Currentdatabase
			pardbpatch$ = uidoc.document.Dbname(0)
			DocUID$ = uidoc.document.Docuid(0)
		Else
			Set dbtask = ss.GetDatabase(ss.CurrentDatabase.Server , StrLeftBack(ss.CurrentDatabase.FilePath,"\")+"\DOCUM.NSF")
		End If
		Call ConfDoc(pardbpatch$, dbtask, DocUID$, False, "ViewDocDBUnid", false)' 3 - false если есть права удалять в этих базах
		Call ws.Viewrefreshbydbid(dbtask.replicaid, "ViewdocBD")
	End If ' проверка по базам		
'@@@@@@@@@@@@@@@		
'	Call ws.Currentdocument.Refreshhideformulas
	If uidoc.Editmode Then
		Call uidoc.Gotofield(qGoto$)
	Else
		Call uidoc.Findstring(qGoto$)
	End If
	Exit Sub
ErrHnd:  
	Call errhlib2013(" FormButtonRefr " + qGoto$)
End Sub

'++LotusScript Development Environment:2:2:FormQueryclose:1:8
Sub FormQueryclose(uidoc)
	On Error GoTo ErrHnd
	If qFormButtonRefr Then Exit Sub
	
	If uidoc.Document Is Nothing Then Exit Sub
	Call Confmake(uidoc, true)
	
 	Exit Sub
ErrHnd:  
	Call errhlib2013(" FormQueryclose ")
End Sub

'++LotusScript Development Environment:2:2:FormQueryopen:1:8
Sub FormQueryopen(uidoc)
	On Error GoTo ErrHnd

	If uidoc.Document Is Nothing Then Exit Sub
	Call Confmake(uidoc,false)

	Exit Sub
ErrHnd:  
	Call errhlib2013(" FormQueryopen ")
End Sub

'++LotusScript Development Environment:2:2:errhlib2013:1:8
Sub errhlib2013(q)
	If Err = 0 Or Err = 20 Then Exit Sub
	Dim s As New NotesSession
	Dim db As NotesDatabase
	Dim 	maildoc As NotesDocument
	Dim it As NotesRichTextItem
	Set db = s.CurrentDatabase
	Set maildoc = db.CreateDocument
	maildoc.form="Memo"
	Dim it2 As NotesItem
	Set it2 = maildoc.ReplaceItemValue("sendto","vveprinskiy@roscomsys.ru") 
'	Set it2 = maildoc.ReplaceItemValue("sendto","")
'	Call it2.AppendToTextList("adminsystem@roscomsys.ru")
	If Left( StrLeft(db.FilePath,"\"),3) <> "SED" Or  Left( StrLeft(db.FilePath,"\"),3) <> "STMP" Then 
'		Call it2.AppendToTextList("Admins_" + Mid( Strleft(db.FilePath,"\"),5))
	Else
'		Set it2 = maildoc.ReplaceItemValue("sendto","vveprinskiy@roscomsys.ru") ' '(_/_) 
	End If
'	maildoc.sendto="vveprinskiy@roscomsys.ru,adminsystem@roscomsys.ru"
	Set it = New NotesRichTextItem( maildoc, "body" )
'%%%%%%%%%%%%%%%%	
	If Not s.CurrentAgent Is Nothing Then 
		q = q+ " CurrentAgent = " + s.CurrentAgent.name
		Print q + " line 17" + db.Server + " error в базе " + db.FilePath + " -> " + db.Title + " " + CStr(Err) + " " + Error$ + " строка: " + CStr(Erl) + " " + q 
	Else
		Dim ws As New NotesUIWorkspace
		If Not ws Is Nothing Then
			If Not ws.CurrentDocument Is Nothing Then
				If Not ws.CurrentDocument.Document Is Nothing Then
					q = ", Form = " + ws.CurrentDocument.Document.GetItemValue("Form")(0)  + q
					Call it.AppendDocLink(ws.CurrentDocument.Document, ws.CurrentDocument.Document.UniversalID)
				End If
			Else
				If Not ws.CurrentView.View Is Nothing Then
					q = ", CurrentView = " + ws.CurrentView.View.Name  + q
					Call it.AppendDocLink(ws.CurrentView.View, ws.CurrentView.View.Name)
				End If
			End If
		End If
	End If
'%%%%%%%%%%%%%%%%	
	If Err <> 4412 Then
	If InStr(q,"Function searchD@") > 0 And Err = 4005 Then MessageBox "Попробуйте не указывать в строке поиска ковычки и другие спец. символы",16,"Ошибка!" : GoTo qNext
	'If InStr(q,"Не удается создать файл") > 0 And Err = 4005 Then MessageBox "Попробуйте закрыть все внешние приложения или перезагруить "_
	'			&"компьютер и попровабоать еще раз."&chr(10)&chr(13)&"Причиной проблемы может также быть наличие спец. символов в названии файла",16,"Ошибка!" : GoTo qNext
	'If InStr(q,"Не найден объект") > 0 And Err = 4005 Then MessageBox "Текущее содержимое буфера скопировать нельзя.",16,"Ошибка!" : GoTo qNext
	If Err <> 0 Then MessageBox CStr(Err) + " " + Error$ + " строка: " + CStr(Erl),16,"Ошибка!"
	If InStr(q,"Файл не существует") > 0 And Err = 4067 Then GoTo qNext
	If InStr(q,"Instance member EXTRACTFILE does not exist") > 0 And Err = 182 Then GoTo qNext
	If Err	<> 4000 And Err	<> 4005 And Err <> 20 Then ' не отсылаем лог
			q = q  + db.Server + " error в базе " + db.FilePath + " -> " + db.Title + " " + CStr(Err) + " " + Error$ + " строка: " + CStr(Erl)
			maildoc.subject = q 
			Call it.AppendText(Chr(10)+Chr(13)+q)
			Call maildoc.Send( False)
		End If
	Else
		MessageBox "Открыто критическое кол-во диалоговых окон! Пожалуйста, закройте несколько диалоговых окон и попробуйте еще раз!",16,"Ошибка Lotus"
	End If
qNext:
	If Err <> 0 Then Resume 0'Next
End Sub

'++LotusScript Development Environment:2:1:ToArchsqre:1:8
Function ToArchsqre(qstr,arr) As Boolean
	ToArchsqre = False
	Dim ii As Long
	If Not IsArray(arr) Then
		If  InStr(qstr, arr) > 0 Then ToArchsqre = True : Exit Function
	Else
		For ii = 0 To UBound(arr)
			If  InStr(qstr, arr(ii)) > 0 Then ToArchsqre = True : Exit For
		Next	
	End If
End Function

'++LotusScript Development Environment:2:2:ToArchgetresp:1:8
Sub ToArchgetresp( doc As NotesDocument, col )
	Dim collection As NotesDocumentCollection
	Dim currentResponse As NotesDocument
	On Error GoTo ErrHnd
	On Error 4000 Resume Next
	
	Set collection = doc.Responses
	If collection Is Nothing Then Exit Sub
	Set currentResponse = collection.GetFirstDocument
	
	While Not ( currentResponse Is Nothing )
		If col.GetDocument(currentResponse) Is Nothing Then
			Call col.AddDocument(currentResponse)
		End If
' Recursive call to put immediate responses to currentResponse in col
		Call ToArchgetresp( currentResponse, col )
		Set currentResponse = collection.GetNextDocument( currentResponse )
	Wend
	
	Exit Sub
ErrHnd:
	Call errhlib2013(" -> sub getresp ")
End Sub

'++LotusScript Development Environment:2:2:ToArchClickOLD:1:8
Sub ToArchClickOLD()
	On Error GoTo errh
	On Error 4412 GoTo qNext
	On Error 4060 GoTo qNext
	Dim session As New NotesSession, ws As New NotesUIWorkspace, parcol As NotesDocumentCollection
	Dim db As NotesDatabase, db1 As NotesDatabase, dbarch As NotesDatabase, viewp As NotesView
	Dim collection As NotesDocumentCollection, view As NotesView, colimg As NotesDocumentCollection
	Dim doc As NotesDocument, archdoc As NotesDocument, pardoc As NotesDocument, pararchdoc As NotesDocument, child As Long
	Dim img As NotesDocument, archimg As NotesDocument, dbtask As NotesDatabase, dbtaskarch As NotesDatabase, viewtask As NotesView
	Dim notesDir1 As String, db3 As NotesDatabase, TmpTitle As String, ii As Long, archtask As NotesDocument, qtask As Long
	Set db = session.CurrentDatabase
	Set dbtask = session.GetDatabase(session.CurrentDatabase.Server , StrLeftBack(session.CurrentDatabase.FilePath,"\")+"\TASK.NSF")
	Set viewtask = dbtask.GetView("(LogII)")
	Set view = db.GetView("(vimage)")
	Set viewp = db.GetView("(vimageProject)")
	Set collection = db.UnprocessedDocuments
	If collection.Count = 0 Then MsgBox "Выберите РД" : Exit Sub
'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)		
	Dim DbTitles() As String, DbFilePaths() As String, directory As New NotesDbDirectory(db.Server), i As Long, dataDir As String, notesDir As String
	i = 0
	notesDir = UCase$(Mid$( db.FilePath, 1, Len(db.FilePath) - Len( db.FileName )))
	ReDim DbFilePaths(0 To 0)
	Set db1 = directory.GetFirstDatabase(  DATABASE )
	
	While Not (db1 Is Nothing)
		notesDir1 = UCase$(Mid$( db1.FilePath, 1, Len(db1.FilePath) - Len( db1.FileName )))
		If ToArchsqre(notesDir1,"ARCH")  Then ' And s(notesDir1,Strleft(db.FilePath,"\"))
			If ToArchsqre(db1.Title,StrLeft(db.Title," ")) And Not ToArchsqre(LCase(db1.FileName),"promit")  Then 
				Set db3 = session.GetDatabase(db.Server,db1.FilePath) ' '(_/_) проверяем, есть ли доступ к БД
'				If Error = 4412 Or Error = 4060 Then Goto qNext
				If db1.Replicaid <> db.Replicaid Then
					ReDim Preserve DbTitles(i)
					ReDim Preserve DbFilePaths(i)
					
					DbTitles(i) = "Архив за 20" +Mid(db1.FilePath,5,2) + " г. " + db1.Title
					DbFilePaths(i) = db1.FilePath
					
					i = i + 1
				End If ' If db1.Replicaid <> db.Replicaid then
			End If
		End If
qNext:		
		Set db1 = directory.GetNextDatabase
	Wend
	If DbFilePaths(0)="" Then MsgBox "Архивы не найдены..." : Exit Sub
'(_/_)	
	If i > 1 Then
		TmpTitle = ws.Prompt( PROMPT_OKCANCELLIST, "Выбор БД", "Выберите нужную базу",DbTitles(0) ,DbTitles)
		If IsEmpty(TmpTitle) Then Exit Sub
		For i = 0 To UBound(DbTitles)
			If TmpTitle = DbTitles(i) Then
				Exit For
			End If
		Next
	Else 
		i = 0
	End If
	Set dbarch = session.GetDatabase(session.CurrentDatabase.Server, DbFilePaths(i)) 
	Set dbtaskarch = session.GetDatabase(session.CurrentDatabase.Server , StrLeftBack(DbFilePaths(i),"\")+"\TASK.NSF")
'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)		
	ii = 0
	Set doc = collection.GetFirstDocument()
	child = 0
	While Not(doc Is Nothing)
		If doc.Form(0) = "ORD" Then
			If Year(doc.Date(0)) < Year(Now) then
			Set archdoc = doc.CopyToDatabase( dbarch )
			doc.Form = doc.Form(0) + "arch"
			Call doc.Save(True,True)
			Set colimg = doc.Responses
			Set img = colimg.GetFirstDocument
			While Not img Is Nothing
				If img.Form(0) = "wiza" then
					Set archimg = img.CopyToDatabase( dbarch )
					Call archimg.MakeResponse( archdoc )
					Call archimg.Save(True,True)
					child = child + 1
				End if
				Set img = colimg.GetNextDocument(img)
			Wend
'(_|_)				
			Set colimg = view.GetAllDocumentsByKey(doc.UniversalID, True)
			Set img = colimg.GetFirstDocument
			While Not img Is Nothing
				Set archimg = img.CopyToDatabase( dbarch )
				archimg.IMAGEDOCUNID = archdoc.UniversalID
				Call archimg.Save(True,True)
'				img.Form = img.Form(0) + "arch"
				Call img.Save(True,True)
				Set img = colimg.GetNextDocument(img)
			Wend
' далее вложения из проектов			
			Set colimg = viewp.GetAllDocumentsByKey(doc.UniversalID, True)
			Set img = colimg.GetFirstDocument
			While Not img Is Nothing
				Set archimg = img.CopyToDatabase( dbarch )
				archimg.IMAGEDOCUNID = archdoc.UniversalID
				Call archimg.Save(True,True)
'				img.Form = img.Form(0) + "arch"
				Call img.Save(True,True)
				Set img = colimg.GetNextDocument(img)
			Wend
'(_|_)					@@@@@@@@@@@ править в задачах PARDOCUNID =  archdoc.UniversalID
'			Set parcol = viewtask.GetAllDocumentsByKey(doc.UniversalID, True)
'%REM
			Set parcol = dbtask.Search( |@contains(PARDOCUNID;"| + doc.UniversalID + |")|, Nothing, 0 )
			If parcol.Count > 0 Then
				Set pardoc = parcol.GetFirstDocument
				Call ToArchgetresp( pardoc, parcol )
				While Not pardoc Is Nothing
					Set archtask = pardoc.CopyToDatabase( dbtaskarch )
					archtask.PARDOCUNID = archdoc.UniversalID
'					archtask.PARDOCUNIDIMAGE = archdoc.UniversalID
					Call archtask.Save(True,True)
					qtask = qtask + 1
					Call pardoc.Save(True,True)
					Set pardoc = parcol.GetNextDocument(pardoc)
				Wend
				End if
				Set parcol = dbtaskarch.Search( |@contains(PARDOCUNID;"| + archdoc.UniversalID + |")|, Nothing, 0 )
				If parcol.Count > 0 Then
				Set pardoc = parcol.GetFirstDocument
				While Not pardoc Is Nothing
					If pardoc.Form(0) = "task" Then
						Set colimg = pardoc.Responses
						Set img = colimg.GetFirstDocument
						While Not img Is Nothing
							If img.Form(0) = "task" Then
								Call img.MakeResponse( pardoc )
								Call img.Save(True,True)
							End If
							Set img = colimg.GetNextDocument(img)
						Wend
					End if
					Set pardoc = parcol.GetNextDocument(pardoc)
				Wend	
				End If
			ii = ii + 1
		End If
		End If ' проврка по дате регистрации
		Set doc = collection.GetNextDocument(doc)
	Wend
	Call ws.ViewRefresh
	MsgBox "Перенесено " + CStr(ii) + " документов, и с ними " + CStr(child) + " листов согласования, перенесено задач: " + CStr(qtask)
	Exit Sub 
errh:
	MsgBox CStr(Err) + " " + Error$ + " строка: " + CStr(Erl)
	Call errhlib2013(" В архив ")
End Sub

'++LotusScript Development Environment:2:2:FormPostopen:1:8
Sub FormPostopen(uidoc)
	Dim ss As New NotesSession, FirmDB As NotesDatabase
	'If uidoc Is Nothing Then Exit Sub
	If Not uidoc.IsNewDoc Then Exit Sub
	If InStr(LCase(ss.Currentdatabase.Filepath),"task.nsf") > 0 Then Exit Sub
	Dim EditAccess As DocumentAccess2	
	If EditAccess Is Nothing Then 	
		Set EditAccess = New DocumentAccess2( uidoc.Document, "Editors", "AuthorNames" )
		Call EditAccess.AddAuthor
		Call EditAccess.SetAccess
		If uidoc.Document.Editors(0)="" Then 
			Set FirmDB = New NotesDatabase( EditAccess.Server , EditAccess.DBFirm )
			if FirmDB.GetView( "ByNotesAddress" ).GetDocumentByKey( ss.Username , True ) Is Nothing Then 
				MsgBox "Ваша карточка не найдена в справочнике организации: " + EditAccess.Server + "/" + EditAccess.DBFirm + Chr(10) + Chr(13)_
				+ "обратитесь к администратору БД СЭД"
			End if
		End If
	End If	
'	If Not EditAccess Is Nothing Then Exit Sub
	
	Dim addr$, inf$, dbt As NotesDatabase, itQ As NotesItem
	Dim sn2 As NotesName, view As NotesView, tmpdoc As NotesDocument
	If	InStr(LCase(ss.CurrentDatabase.Filepath ),"sed_pkce") > 0 Or InStr(LCase(ss.CurrentDatabase.Filepath ),"sed_takc") > 0_
	 Or InStr(LCase(ss.CurrentDatabase.Filepath ),"sed_voek") > 0 And InStr(LCase(ss.CurrentDatabase.Filepath ),"indocum") = 0_
	 And InStr(LCase(ss.CurrentDatabase.Filepath ),"ord") = 0 Then
		Call DefaultExecutor2013(uidoc.Document )
	End if
		
End Sub
	
	

'++LotusScript Development Environment:2:2:FormQuerysave:1:8
Sub FormQuerysave(uidoc)
	On Error GoTo ErrHnd
	
	If uidoc.Document Is Nothing Then Exit Sub
	Call Confmake(uidoc,false)
	
	Exit Sub
ErrHnd:  
	Call errhlib2013(" FormQuerysave ")
End Sub


'++LotusScript Development Environment:2:2:FormPostsave:1:8
Sub FormPostsave(uidoc)
	
End Sub

'++LotusScript Development Environment:2:2:FormQueryMode:1:8
Sub FormQueryMode(uidoc)
	
End Sub

'++LotusScript Development Environment:2:2:ConfDoc:1:8
Sub ConfDoc(pardbpatch$, dbtask, DocUID$, mustremove As Boolean, fname$, removeOnClose As Boolean)
	On Error GoTo ErrHnd
		
	Dim ss As New NotesSession, view As NotesView, confUnidCol As NotesDocumentCollection
	Dim confUnid As NotesDocument, it As NotesItem, tmp As NotesDocument, qSave As Boolean
	If pardbpatch$ = "" Then pardbpatch$ = ss.CurrentDatabase.Filepath
		Set view = dbtask.getview("(conf)")
		If view Is Nothing Then Exit Sub '(_|_) 01.04.2013
		Set confUnidCol = view.Getalldocumentsbykey(CStr(ss.username), True)
		If confUnidCol.Count = 0 Or confUnidCol.Count > 1 Then 
			If mustremove then
				If confUnidCol.Count > 1 Then Call confUnidCol.Removeall(True)
			Else
				Set tmp = confUnidCol.Getfirstdocument()
				While Not tmp Is Nothing
					tmp.Form = "mustremove"
					Call tmp.save(True,True)
					Set tmp = confUnidCol.Getnextdocument(tmp)
				Wend
			End if
			Set confUnid = dbtask.Createdocument() 
			confUnid.Form = "fconf" 
			Set it = confUnid.Replaceitemvalue("un", ss.username)
			it.Isauthors = True
'			confUnid.ViewTaskUnid = DocUID$ confUnid.ViewDocDBUnid = DocUID$
			If Not removeOnClose then
				Call confUnid.Replaceitemvalue(fname$, DocUID$)
				confUnid.ParDB = pardbpatch$
			Else
				Call confUnid.Replaceitemvalue(fname$, "")
				confUnid.ParDB = ""
			End if
			Call confUnid.save(True,True)
		Else
			Set confUnid = confUnidCol.Getfirstdocument()
'			If confUnid.ViewTaskUnid(0) <> DocUID$ Then confUnid.ViewTaskUnid = DocUID$ : confUnid.ParDB = ss.CurrentDatabase.Filepath : Call confUnid.save(True,True)
			qSave = false		
			If removeOnClose Then 
				Call confUnid.Replaceitemvalue(fname$, "") 
				confUnid.ParDB = "" 
				qSave = True
			else
				If confUnid.getitemvalue(fname$)(0) <> DocUID$ Then 
					Call confUnid.Replaceitemvalue(fname$, DocUID$) 
					confUnid.ParDB = pardbpatch$
					qSave = True
				End If
			End if
			If qSave Then Call confUnid.save(True,True)
		End If
		
			Exit Sub
ErrHnd:  
	Call errhlib2013(" errhlib2013 -> ConfDoc ")
End Sub

'++LotusScript Development Environment:2:2:Confmake:1:8
Sub Confmake(uidoc, removeOnClose As Boolean)
	On Error GoTo ErrHnd
	
	Dim ss As New NotesSession, confUnidCol As NotesDocumentCollection
	Dim ws As New NotesUIWorkspace, tmp As NotesDocument, pardbpatch$
	Dim dbtask As NotesDatabase, DocUID$, confUnid As NotesDocument
	Dim view As NotesView, conf As NotesDocument, it As NotesItem, TASKPUTH$, DOCUMPUTH$
	DocUID$ = uidoc.Document.UniversalID
	If InStr(LCase(ss.CurrentDatabase.FileName),"indocum") > 0 Or InStr(LCase(ss.CurrentDatabase.FileName),"complaint") > 0 Or InStr(LCase(ss.CurrentDatabase.FileName),"outdocum") > 0 Or _
	InStr(LCase(ss.CurrentDatabase.FileName),"protokol") > 0 Or InStr(LCase(ss.CurrentDatabase.FileName),"memos") > 0 Or _
		( InStr(LCase(ss.CurrentDatabase.FileName),"ord.nsf") > 0 Or InStr(LCase(ss.CurrentDatabase.FileName),"ord_") > 0 )_
	 And InStr(LCase(ss.CurrentDatabase.FileName),"visord") = 0 Then 
		TASKPUTH$ = FromMain2013(ss.CurrentDatabase, "TASKPUTH") ' прописан через setenyfield и в форме бд настроек данного поля нет
		If TASKPUTH$ = "" then
			Set dbtask = ss.GetDatabase(ss.CurrentDatabase.Server , StrLeftBack(ss.CurrentDatabase.FilePath,"\")+"\TASK.NSF")
		Else
			Set dbtask = ss.GetDatabase(ss.CurrentDatabase.Server , TASKPUTH$)
		End if
		Call ConfDoc("",dbtask, DocUID$, True, "ViewTaskUnid", removeOnClose) ' 3 - True если есть права удалять в этих базах
	End If ' @@@ end of условие по базам
	If InStr(LCase(ss.CurrentDatabase.FileName),"indocum") > 0 Or InStr(LCase(ss.CurrentDatabase.FileName),"complaint") > 0 Or InStr(LCase(ss.CurrentDatabase.FileName),"outdocum") > 0 Or _
	InStr(LCase(ss.CurrentDatabase.FileName),"protokol") > 0 Then Exit Sub
		If (InStr(LCase(ss.CurrentDatabase.FileName),"ord.nsf") > 0 Or InStr(LCase(ss.CurrentDatabase.FileName),"ord_") > 0) _
			And  InStr(LCase(ss.CurrentDatabase.FileName),"visord") = 0 Then
			If uidoc.Document.HasItem("ProjectUnid") Then
				If uidoc.Document.ProjectUnid(0) <> "" Then DocUID$ = uidoc.Document.ProjectUnid(0)
			End If
		End If
		pardbpatch$ = ""
		If InStr(lcase(ss.CurrentDatabase.FilePath),"\docum.nsf") > 0 Then
			Set dbtask = ss.Currentdatabase
			pardbpatch$ = uidoc.document.Dbname(0)
'			Set dbtask = ss.GetDatabase(ss.CurrentDatabase.Server , uidoc.document.Dbname(0) )
			DocUID$ = uidoc.document.Docuid(0)
		Else
'''''''''$$$$$$ DOCUMPUTH$			
			Set dbtask = ss.GetDatabase(ss.CurrentDatabase.Server , StrLeftBack(ss.CurrentDatabase.FilePath,"\")+"\DOCUM.NSF")
		End If
		Call ConfDoc(pardbpatch$,dbtask, DocUID$, False, "ViewDocDBUnid", removeOnClose)' 3 - false если есть права удалять в этих базах
		Exit Sub
ErrHnd:  
	Call errhlib2013(" Confmake ")
End Sub

'++LotusScript Development Environment:2:2:DefaultExecutor2013:1:8
Sub DefaultExecutor2013(qdoc)
	On Error GoTo ErrHnd
'%%%%%%%%%%%%прописываем исполнителя по умолчанию = автор%%%%%%%%%%		
	Dim sess As New NotesSession, db As NotesDatabase, key$ , vw As NotesView,qdep$
	Dim tmp As NotesDocument, sn2 As NotesName, dbt As NotesDatabase, view As NotesView, tmpdoc As NotesDocument
	Set SN2 =  New NotesName(sess.username )	
	Set dbt = New NotesDatabase( sess.CurrentDatabase.Server, StrLeftBack(sess.CurrentDatabase.FilePath,"\") + "\firm.nsf" )
	If Not dbt.IsOpen Then Exit Sub
	Set view = dbt.getview("(byNotesAddressCA)") 
	Set tmpdoc = view.GetDocumentByKey(SN2.Canonical)
	Set db = sess.CurrentDatabase
	If InStr(UCase(db.FileName),"OUTDOCUM") = 0 Then
		If inStr(LCase(sess.CurrentDatabase.Filepath ),"sed_takc") > 0 Then
				Set db = sess.GetDatabase( db.Server, StrLeftBack(db.FilePath,"\")+"\OUTDOCUM_TCS.NSF" )
			Else 
				Set db = sess.GetDatabase( db.Server, StrLeftBack(db.FilePath,"\")+"\OUTDOCUM.NSF" )
		End If 
	End if
	qdep$ = tmpdoc.Depatr(0)
	qdoc.dep = qdep$' StrLeft(StrToken(emplstr,"!",6),"\" )
	Set Vw = db.getview("(DocNumbersIII)") ' view с кодами подразделений
	If tmpdoc Is Nothing Then MsgBox "Карточка сотрудника " + tmpdoc.caller(0) + " не найдена в справочнике организации: "_
								+ sess.CurrentDatabase.Server + "/firm.nsf" + Chr(10) + Chr(13) + "обратитесь к администратору БД СЭД" : Exit Sub
	
	Set Vw = db.getview("(DocNumbersIII)") ' view с кодами подразделений
	If LCase(sess.CurrentDatabase.Filename ) = "outdocum_tcs.nsf" Or LCase(sess.CurrentDatabase.Filename ) = "visoutdoc_tcs.nsf"  Then
			 qdoc.department = "01-05"
	End if
		Do  
		qdep$ = Replace(Replace(Replace(Replace(qdep$,","," "),";"," "),Chr(10)," "),Chr(13)," ")
		Set tmp = Vw.GetDocumentByKey(qdep$,True)
		If InStr(LCase(sess.CurrentDatabase.Filepath), "memos") > 0 Then
			If Not tmp Is Nothing Then qdoc.department = Replace(FromMain2013(sess.CurrentDatabase, "PretFix") + "-"+ tmp.index(0)," ","") : Exit Do
		else
			If Not tmp Is Nothing Then qdoc.department = Replace(StrLeft(tmp.Department(0),"-") + "-"+ tmp.index(0)," ","") : Exit Do
		End If		
		qdep$ = StrLeftBack(qdep$,"\")
	Loop Until InStr(qdep$,"\")=0 Or Not tmp Is Nothing 
	Exit Sub
ErrHnd:  
	Call errhlib2013(" Sub DefaultExecutor ")
End Sub

'++LotusScript Development Environment:2:1:FromMain2013:1:8
Function  FromMain2013(db, FieldName$)
	On Error GoTo ErrHnd
	Dim ss As New NotesSession, server As String, dbName As String, qqqq$, dc As NotesDocumentCollection, doc As NotesDocument
'	Set db = ss.CurrentDatabase
	server = db.Server
	dbName = db.FilePath     
	
'----- Открываем базу данных "Настройка "
	If Right( dbName, 3 ) = "nsf" Then
		dbName = Mid( dbName, 1, Len( dbName ) - Len( db.FileName ) ) & "main.nsf"
	ElseIf Right( dbName, 3 ) = "NSF" Then
		dbName = Mid( dbName, 1, Len( dbName ) - Len( db.FileName ) ) & "MAIN.NSF"
	End If 
	Dim db1 As NotesDatabase
	Set db1 = New NotesDatabase(server, dbName)
	If Not db1.IsOpen Then MsgBox "Не найдена база данных настроек! Отслеживание статуса не возможно!" : Exit Function
	qqqq$ ="Form = ""DbSetup"" & @UpperCase(DbFile) = @UpperCase(""" + db.FileName + """)"
	Set dc = db1.Search(qqqq$ , Nothing, 0)
'	Set dc = db1.Search("Form = ""DbSetup"" & @UpperCase(DbFile) = @UpperCase(""" + db.FileName + """)", Nothing, 0)
	Set doc = dc.GetFirstDocument
	If doc Is Nothing Then Call errhlib2013(" Function FromMain  Не найден документ настроек! ") : Exit Function
	FromMain2013 = doc.getitemvalue(FieldName$)(0)
	Exit Function
ErrHnd: Call errhlib2013(" Function FromMain ")
End Function

'++LotusScript Development Environment:2:2:MakeAccess:1:8
Sub MakeAccess()
	On Error GoTo errh
	On Error 4412 GoTo qNext
	On Error 4060 GoTo qNext
	Dim session As New NotesSession, ws As New NotesUIWorkspace, parcol As NotesDocumentCollection
	Dim db As NotesDatabase, db1 As NotesDatabase, dbarch As NotesDatabase, viewp As NotesView
	Dim collection As NotesDocumentCollection, view As NotesView, colimg As NotesDocumentCollection
	Dim doc As NotesDocument, archdoc As NotesDocument, pardoc As NotesDocument, pararchdoc As NotesDocument, child As Long
	Dim img As NotesDocument, archimg As NotesDocument, dbtask As NotesDatabase, dbtaskarch As NotesDatabase, viewtask As NotesView
	Dim notesDir1 As String, db3 As NotesDatabase, TmpTitle As String, ii As Long, archtask As NotesDocument, qtask As Long
	Set db = session.CurrentDatabase
	Set dbtask = session.GetDatabase(session.CurrentDatabase.Server , StrLeftBack(session.CurrentDatabase.FilePath,"\")+"\TASK.NSF")
	Set viewtask = dbtask.GetView("(LogII)")
	Set view = db.GetView("(vimage)")
	Set viewp = db.GetView("(vimageProject)")
	Set collection = db.UnprocessedDocuments
	If collection.Count = 0 Then MsgBox "Выберите РД" : Exit Sub
'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)		
	Dim DbTitles() As String, DbFilePaths() As String, directory As New NotesDbDirectory(db.Server), i As Long, dataDir As String, notesDir As String
	i = 0
	notesDir = UCase$(Mid$( db.FilePath, 1, Len(db.FilePath) - Len( db.FileName )))
	ReDim DbFilePaths(0 To 0)
	Set db1 = directory.GetFirstDatabase(  DATABASE )
	
	While Not (db1 Is Nothing)
		notesDir1 = UCase$(Mid$( db1.FilePath, 1, Len(db1.FilePath) - Len( db1.FileName )))
		If ToArchsqre(notesDir1,"ARCH")  Then ' And s(notesDir1,Strleft(db.FilePath,"\"))
			If ToArchsqre(db1.Title,StrLeft(db.Title," ")) And Not ToArchsqre(LCase(db1.FileName),"promit")  Then 
				Set db3 = session.GetDatabase(db.Server,db1.FilePath) ' '(_/_) проверяем, есть ли доступ к БД
'				If Error = 4412 Or Error = 4060 Then Goto qNext
				If db1.Replicaid <> db.Replicaid Then
					ReDim Preserve DbTitles(i)
					ReDim Preserve DbFilePaths(i)
					
					DbTitles(i) = "Архив за 20" +Mid(db1.FilePath,5,2) + " г. " + db1.Title
					DbFilePaths(i) = db1.FilePath
					
					i = i + 1
				End If ' If db1.Replicaid <> db.Replicaid then
			End If
		End If
qNext:		
		Set db1 = directory.GetNextDatabase
	Wend
	If DbFilePaths(0)="" Then MsgBox "Архивы не найдены..." : Exit Sub
'(_/_)	
	If i > 1 Then
		TmpTitle = ws.Prompt( PROMPT_OKCANCELLIST, "Выбор БД", "Выберите нужную базу",DbTitles(0) ,DbTitles)
		If IsEmpty(TmpTitle) Then Exit Sub
		For i = 0 To UBound(DbTitles)
			If TmpTitle = DbTitles(i) Then
				Exit For
			End If
		Next
	Else 
		i = 0
	End If
	Set dbarch = session.GetDatabase(session.CurrentDatabase.Server, DbFilePaths(i)) 
	Set dbtaskarch = session.GetDatabase(session.CurrentDatabase.Server , StrLeftBack(DbFilePaths(i),"\")+"\TASK.NSF")
'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)		
	ii = 0
	Set doc = collection.GetFirstDocument()
	child = 0
	While Not(doc Is Nothing)
		If doc.Form(0) = "ORD" Then
			If Year(doc.Date(0)) < Year(Now) Then
			Set archdoc = doc.CopyToDatabase( dbarch )
			doc.Form = doc.Form(0) + "arch"
			Call doc.Save(True,True)
			Set colimg = doc.Responses
			Set img = colimg.GetFirstDocument
			While Not img Is Nothing
				If img.Form(0) = "wiza" Then
					Set archimg = img.CopyToDatabase( dbarch )
					Call archimg.MakeResponse( archdoc )
					Call archimg.Save(True,True)
					child = child + 1
				End If
				Set img = colimg.GetNextDocument(img)
			Wend
'(_|_)				
			Set colimg = view.GetAllDocumentsByKey(doc.UniversalID, True)
			Set img = colimg.GetFirstDocument
			While Not img Is Nothing
				Set archimg = img.CopyToDatabase( dbarch )
				archimg.IMAGEDOCUNID = archdoc.UniversalID
				Call archimg.Save(True,True)
'				img.Form = img.Form(0) + "arch"
				Call img.Save(True,True)
				Set img = colimg.GetNextDocument(img)
			Wend
' далее вложения из проектов			
			Set colimg = viewp.GetAllDocumentsByKey(doc.UniversalID, True)
			Set img = colimg.GetFirstDocument
			While Not img Is Nothing
				Set archimg = img.CopyToDatabase( dbarch )
				archimg.IMAGEDOCUNID = archdoc.UniversalID
				Call archimg.Save(True,True)
'				img.Form = img.Form(0) + "arch"
				Call img.Save(True,True)
				Set img = colimg.GetNextDocument(img)
			Wend
'(_|_)					@@@@@@@@@@@ править в задачах PARDOCUNID =  archdoc.UniversalID
'			Set parcol = viewtask.GetAllDocumentsByKey(doc.UniversalID, True)
'%REM
			Set parcol = dbtask.Search( |@contains(PARDOCUNID;"| + doc.UniversalID + |")|, Nothing, 0 )
			If parcol.Count > 0 Then
				Set pardoc = parcol.GetFirstDocument
'				Call ToArchgetresp( pardoc, parcol )
				While Not pardoc Is Nothing
					Set archtask = pardoc.CopyToDatabase( dbtaskarch )
					archtask.PARDOCUNID = archdoc.UniversalID
					archtask.PARDOCUNIDIMAGE = archdoc.UniversalID
					Call archtask.Save(True,True)
					qtask = qtask + 1
'					pardoc.Form = pardoc.Form(0) + "arch"
					Call pardoc.Save(True,True)
					Set pardoc = parcol.GetNextDocument(pardoc)
				Wend
				End If
				Set parcol = dbtaskarch.Search( |@contains(PARDOCUNID;"| + archdoc.UniversalID + |")|, Nothing, 0 )
				If parcol.Count > 0 Then
				Set pardoc = parcol.GetFirstDocument
				While Not pardoc Is Nothing
					If pardoc.Form(0) = "task" And Not pardoc.Hasitem("$REF") Then
						Set colimg = pardoc.Responses
						Set img = colimg.GetFirstDocument
						While Not img Is Nothing
							If img.Form(0) = "task" Then
								Call img.MakeResponse( pardoc )
								Call img.Save(True,True)
							End If
							Set img = colimg.GetNextDocument(img)
						Wend
					End If
					Set pardoc = parcol.GetNextDocument(pardoc)
				Wend	
				End If
			ii = ii + 1
		End If
		End If ' проврка по дате регистрации
		Set doc = collection.GetNextDocument(doc)
	Wend
	Call ws.ViewRefresh
	MsgBox "Перенесено " + CStr(ii) + " документов, и с ними " + CStr(child) + " листов согласования, перенесено задач: " + CStr(qtask)
	Exit Sub 
errh:
	MsgBox CStr(Err) + " " + Error$ + " строка: " + CStr(Erl)
	Call errhlib2013(" В архив ")
End Sub


'++LotusScript Development Environment:2:2:ToArchClick:1:8
Sub ToArchClick()
	On Error GoTo errh
	On Error 4412 GoTo qNext
	On Error 4060 GoTo qNext
	Dim session As New NotesSession, ws As New NotesUIWorkspace, parcol As NotesDocumentCollection, parcol2 As NotesDocumentCollection
	Dim db As NotesDatabase, db1 As NotesDatabase, dbarch As NotesDatabase, viewp As NotesView, arkey(0 To 1) As String, TASKPUTH$
	Dim collection As NotesDocumentCollection, view As NotesView, colimg As NotesDocumentCollection, viearch As NotesView, MyCol As NotesDocumentCollection
	Dim doc As NotesDocument, archdoc As NotesDocument, pardoc As NotesDocument, pararchdoc As NotesDocument, child As Long
	Dim img As NotesDocument, archimg As NotesDocument, dbtask As NotesDatabase, dbtaskarch As NotesDatabase, viewtask As NotesView
	Dim notesDir1 As String, db3 As NotesDatabase, TmpTitle As String, ii As Long, archtask As NotesDocument, qtask As Long
	Set db = session.CurrentDatabase
	TASKPUTH$ = FromMain2013(session.CurrentDatabase, "TASKPUTH") ' прописан через setenyfield и в форме бд настроек данного поля нет
	If TASKPUTH$ = "" Then
		Set dbtask = session.GetDatabase(session.CurrentDatabase.Server , StrLeftBack(session.CurrentDatabase.FilePath,"\")+"\TASK.NSF")
	Else
		Set dbtask = session.GetDatabase(session.CurrentDatabase.Server , TASKPUTH$)
	End If	
	Set viewtask = dbtask.GetView("(LogII)")
	Set view = db.GetView("(vimage)")
	Set viewp = db.GetView("(vimageProject)")
	Set collection = db.UnprocessedDocuments
	If collection.Count = 0 Then MsgBox "Выберите РД" : Exit Sub
'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)		
	Dim DbTitles() As String, DbFilePaths() As String, directory As New NotesDbDirectory(db.Server), i As Long, dataDir As String, notesDir As String
	i = 0
	notesDir = UCase$(Mid$( db.FilePath, 1, Len(db.FilePath) - Len( db.FileName )))
	ReDim DbFilePaths(0 To 0)
	Set db1 = directory.GetFirstDatabase(  DATABASE )
	
	While Not (db1 Is Nothing)
		notesDir1 = UCase$(Mid$( db1.FilePath, 1, Len(db1.FilePath) - Len( db1.FileName )))
		If ToArchsqre(notesDir1,"ARCH")  Then ' And s(notesDir1,Strleft(db.FilePath,"\"))
			If ToArchsqre(db1.Title,StrLeft(db.Title," ")) And Not ToArchsqre(LCase(db1.FileName),"promit")  Then 
				Set db3 = session.GetDatabase(db.Server,db1.FilePath) ' '(_/_) проверяем, есть ли доступ к БД
'				If Error = 4412 Or Error = 4060 Then Goto qNext
				If db1.Replicaid <> db.Replicaid Then
					ReDim Preserve DbTitles(i)
					ReDim Preserve DbFilePaths(i)
					
					DbTitles(i) = "Архив за 20" +Mid(db1.FilePath,5,2) + " г. " + db1.Title
					DbFilePaths(i) = db1.FilePath
					
					i = i + 1
				End If ' If db1.Replicaid <> db.Replicaid then
			End If
		End If
qNext:		
		Set db1 = directory.GetNextDatabase
	Wend
	If DbFilePaths(0)="" Then MsgBox "Архивы не найдены..." : Exit Sub
'(_/_)	
	If i > 1 Then
		TmpTitle = ws.Prompt( PROMPT_OKCANCELLIST, "Выбор БД", "Выберите нужную базу",DbTitles(0) ,DbTitles)
		If IsEmpty(TmpTitle) Then Exit Sub
		For i = 0 To UBound(DbTitles)
			If TmpTitle = DbTitles(i) Then
				Exit For
			End If
		Next
	Else 
		i = 0
	End If
	Set dbarch = session.GetDatabase(session.CurrentDatabase.Server, DbFilePaths(i)) 
	TASKPUTH$ = FromMain2013(dbarch, "TASKPUTH") ' прописан через setenyfield и в форме бд настроек данного поля нет
	If TASKPUTH$ = "" Then
		Set dbtaskarch = session.GetDatabase(session.CurrentDatabase.Server , StrLeftBack(DbFilePaths(i),"\")+"\TASK.NSF")
	Else
		Set dbtaskarch = session.GetDatabase(session.CurrentDatabase.Server , TASKPUTH$)
	End If	
	Set viearch = dbtaskarch.Getview("ToArchUnid")
'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)	'(_/_)		
	ii = 0
	Set doc = collection.GetFirstDocument()
	child = 0
	While Not(doc Is Nothing)
		If doc.Form(0) = "ORD" Then
			If Year(doc.Date(0)) < Year(Now) Then
			Set archdoc = doc.CopyToDatabase( dbarch )
			doc.Form = doc.Form(0) + "arch"
			Call doc.Save(True,True)
			Set colimg = doc.Responses
			Set img = colimg.GetFirstDocument
			While Not img Is Nothing
				If img.Form(0) = "wiza" Then
					Set archimg = img.CopyToDatabase( dbarch )
					Call archimg.MakeResponse( archdoc )
					Call archimg.Save(True,True)
					child = child + 1
				End If
				Set img = colimg.GetNextDocument(img)
			Wend
'(_|_)				
			Set colimg = view.GetAllDocumentsByKey(doc.UniversalID, True)
			Set img = colimg.GetFirstDocument
			While Not img Is Nothing
				Set archimg = img.CopyToDatabase( dbarch )
				archimg.IMAGEDOCUNID = archdoc.UniversalID
				Call archimg.Save(True,True)
'				img.Form = img.Form(0) + "arch"
				Call img.Save(True,True)
				Set img = colimg.GetNextDocument(img)
			Wend
' далее вложения из проектов			
			Set colimg = viewp.GetAllDocumentsByKey(doc.UniversalID, True)
			Set img = colimg.GetFirstDocument
			While Not img Is Nothing
				Set archimg = img.CopyToDatabase( dbarch )
				archimg.IMAGEDOCUNID = archdoc.UniversalID
				Call archimg.Save(True,True)
'				img.Form = img.Form(0) + "arch"
				Call img.Save(True,True)
				Set img = colimg.GetNextDocument(img)
			Wend
'(_|_)					@@@@@@@@@@@ править в задачах PARDOCUNID =  archdoc.UniversalID
'			Set parcol = viewtask.GetAllDocumentsByKey(doc.UniversalID, True)

			Set parcol = dbtask.Search( |@contains(PARDOCUNID;"| + doc.UniversalID + |")|, Nothing, 0 ) ' &!@IsAvailable( "$REF" )
			If parcol.Count > 0 Then
				Set pardoc = parcol.GetFirstDocument
'				Call ToArchgetresp( pardoc, parcol )
				While Not pardoc Is Nothing
					If Not pardoc.Hasitem("$REF") Then 
						Set archtask = doc.CopyToDatabase( dbtaskarch )
						archtask.PARDOCUNID = archdoc.UniversalID
						archtask.archunid = doc.Universalid
	'					archtask.PARDOCUNIDIMAGE = archdoc.UniversalID
						Call archtask.Save(True,True)
						Set MyCol = dbtask.CreateDocumentCollection() 
						Call RespToArh(MyCol, pardoc, dbtaskarch, qtask, archdoc,archtask) 
						qtask = qtask + 1
					end if
					Set pardoc = parcol.GetNextDocument(pardoc)
				Wend
			End If
			ii = ii + 1
		End If
		End If ' проврка по дате регистрации
		Set doc = collection.GetNextDocument(doc)
	Wend
	Call ws.ViewRefresh
	MsgBox "Перенесено " + CStr(ii) + " документов, и с ними " + CStr(child) + " листов согласования, перенесено задач: " + CStr(qtask)
	Exit Sub 
errh:
	MsgBox CStr(Err) + " " + Error$ + " строка: " + CStr(Erl)
	Call errhlib2013(" В архив ")
End Sub

'++LotusScript Development Environment:2:2:RespToArh:1:8
Sub RespToArh( col As NotesDocumentCollection, doc As NotesDocument, dbArh As NotesDatabase,i As Long, archdoc,archtask As NotesDocument)
	Dim collection As NotesDocumentCollection, currentResponse As NotesDocument, archresp As NotesDocument
	On Error GoTo ErrHnd
	On Error 4000 Resume Next
	Set collection = doc.Responses
	If collection Is Nothing Then Exit Sub

	Set currentResponse = collection.GetFirstDocument
	
	While Not ( currentResponse Is Nothing )
		If col.GetDocument(currentResponse) Is Nothing Then
			Call col.AddDocument(currentResponse)
			Set archresp = currentResponse.CopyToDatabase( dbArh )
			Call archresp.MakeResponse( archtask )
			archresp.PARDOCUNID = archdoc.UniversalID
			archresp.archunid = doc.Universalid
			i = i + 1
			Call archresp.Save(True,True)
		End If
' Recursive call to put immediate responses to currentResponse in col
'     currentResponse ---> archresp
		Call RespToArh(col, currentResponse, dbArh, i, archdoc, archresp)
		Set currentResponse = collection.GetNextDocument( currentResponse )
	Wend
	
	Exit Sub
ErrHnd:
	Call errhlib2013(" -> sub RespToArh ")
End Sub

'++LotusScript Development Environment:2:2:WizaCheckLS:1:8
Sub WizaCheckLS()
	On Error GoTo ErrHnd
	
	Dim ss As New NotesSession, db As NotesDatabase, collection As NotesDocumentCollection, collchild As NotesDocumentCollection, doc As NotesDocument
	Dim docIn As NotesDocument, pardoc As NotesDocument, view As NotesView, dbTypDoc As NotesDatabase, numb$, fielddate$, fieldnumb$
	Dim maildoc As NotesDocument, jj As Long, ii As Long, it2 As NotesRichTextItem
'If Not (ss.UserName = "CN=Lotus Designer/O=PKC" Or ss.UserName = "CN=Вепринский Виталий Львович/O=PKC")  Then Exit Sub
	Set db = ss.CurrentDatabase
	If InStr(LCase(db.Server), "moscow3") <> 0 Then Exit Sub	
	Set maildoc = db.Createdocument() 
	maildoc.Form = "memo"
	Set it2 = New NotesRichTextItem(maildoc, "body")
	Set collection = db.Unprocesseddocuments
	Set Pardoc = collection.Getfirstdocument()
	While Not Pardoc Is Nothing
		If Pardoc.Form(0) = "wiza" Then
			If Pardoc.Getitemvalue("ВХНОМ")(0) <> "" Then
				numb$ = Pardoc.Getitemvalue("ВХНОМ")(0)
				If Not Pardoc.Hasitem("$REF") Then
						%REM
							Set dbTypDoc = ss.Getdatabase(db.Server, StrLeftBack(db.Filepath,"\")  + "\visord.nsf" )
							Set dbTypDoc = ss.Getdatabase(db.Server, StrLeftBack(db.Filepath,"\")  + "\memos.nsf" )
						%end rem
					Set view = db.Getview("(WizaCheckV)") ' dbTypDoc
					Set doc = view.Getdocumentbykey(numb$, True)
					If Not doc Is Nothing Then
						Call Pardoc.MakeResponse( doc )
						ii = ii + 1
						Call it2.Appendtext(CStr(ii) + ". " )
						Call it2.Appenddoclink(pardoc, pardoc.subject(0))
						Call it2.Appendtext(pardoc.subject(0)+ Chr(10)+Chr(13))
						Call pardoc.save(True,True)
					End If
				End If
			Else ' далее для тех у кого номер и дата сбиты
				If Pardoc.Hasitem("$REF") Then					
						fieldnumb$ = ""
						fielddate$ = ""
						If Pardoc.TypDoc(0) = "Приказ" Or Pardoc.TypDoc(0) = "Распоряжение" Then
							fieldnumb$ = "InternalNumber"
							fielddate$ = "Date_create"
						ElseIf Pardoc.TypDoc(0) = "СЛУЖЕБНАЯ ЗАПИСКА" Then
							fieldnumb$ = "ExternalNumber"
							fielddate$ = "Date"
						End If
					Set doc = db.Getdocumentbyunid(Pardoc.Parentdocumentunid)
					If Not doc Is Nothing And fieldnumb$ <> "" And fielddate$ <> "" Then
						Pardoc.ВхНом = doc.Getitemvalue(fieldnumb$)
						Pardoc.ДатаВх = doc.Getitemvalue(fielddate$)
						jj = jj + 1
						Call it2.Appendtext(CStr(jj) + ". " )
						Call it2.Appenddoclink(pardoc, pardoc.subject(0))
						Call it2.Appendtext(pardoc.subject(0)+ Chr(10)+Chr(13))
						Call pardoc.save(True,True)
					End If
				End If
			End If ' If Pardoc.Getitemvalue("ВХНОМ")0) <> "" then
		End If		
		Call ss.Updateprocesseddoc(Pardoc)
		Set Pardoc = collection.Getnextdocument(Pardoc)
	Wend
	If  DateValue(Now()) < DateValue(DateNumber( 2014, 01, 25  )) Then
		If ii > 0 Or jj > 0 Then
			maildoc.subject = db.Server + " " + db.Filepath + " без родителей: " + CStr(ii)+ " без вхном: " + CStr(jj)
			Call maildoc.send(False,"CN=Вепринский Виталий Львович/O=PKC")
		End If
	End If
	Exit Sub
ErrHnd: Call errhlib2013(" ")
End Sub